#include <stdio.h>
#include <string.h>
struct student
{
    char name[100];
    int r;
    int div;
    int marks;
};
int n, roll, index, left, right, rollnumber;
struct student s[100];

int main()
{

    for (;;)
    {

        void accept();
        void display(struct student s[]);
        void bubblesort(struct student s[], int n);
        void insertionsort(struct student s[], int n);
        void selectionSort(struct student s[], int n);
        void binarySearch(struct student s[], int left, int right, int rollNumber);
        printf("Enter How many students marks you have to enter:");
        scanf("%d", &n);
        accept();

        display(s);
        bubblesort(s, n);
        printf("\n\nAfter using Bubble sort:\n");
        display(s);
        insertionsort(s, n);
        printf("\n\nAfter using Insertion sort:\n");
        display(s);
        selectionSort(s, n);
        printf("\n\nAfter using Selection sort:\n");
        display(s);
        printf("Enter roll number to search: ");
        scanf("%d", &roll);
        index = binarySearch(s, 0, n - 1, roll);
        if (index != -1)
        {
            printf("Student found at index %d\n", index);
            printf("Roll Number: %d, Name: %s, Marks: %.2f\n", student[index].r, student[index].name, student[index].marks);
        }
        else
        {
            printf("Student not found\n");
        }
        break;

        return 0;
    }
}
void accept()
{

    for (int i = 0; i < n; i++)
    {
        printf("\n");
        printf(" Enter %d  Student Information:\n", i + 1);
        printf("Enter Student Name:");
        scanf("%s", &s[i].name);
        printf("Enter Student Roll Number:");
        scanf("%d", &s[i].r);

        printf("Enter Student Div:");
        scanf("%d", &s[i].div);

        printf("Enter Student Marks:");
        scanf("%d", &s[i].marks);
        printf("\n");
        printf("You Complete The Information of %d Student\n\n\n", i + 1);
    }
}
void display(struct student s[])
{
    printf("\n");
    printf("SR NO.\t\tSTUDENT NAME\t\t\tROLL NO.\t\t\tDIV\t\t\tMARKS");
    printf("\n");
    for (int i = 0; i < n; i++)
    {

        printf("%d.\t\t%s\t\t\t\t%d\t\t\t\t%d\t\t\t%d\t\t\t\n", i + 1, s[i].name, s[i].r, s[i].div, s[i].marks);
    }
}
void bubblesort(struct student s[], int n)
{
    struct student temp;
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - 1 - i; j++)
        {
            if (s[j].r > s[j + 1].r)

            {
                temp = s[j];
                s[j] = s[j + 1];
                s[j + 1] = temp;
            }
        }
    }
}

void insertionsort(struct student s[], int n)
{
    for (int i = 0; i < n; i++)
    {
        int j;
        struct student key;
        key = s[i];
        j = i - 1;
        while (j >= 0 && s[j].r > key.r)
        {
            s[j + 1] = s[j];
            j = j - 1;
        }
        s[j + 1] = key;
    }
}
void selectionSort(struct student s[], int n)
{
    int i, j, minIndex;
    struct student temp;
    for (i = 0; i < n - 1; i++)
    {
        minIndex = i;
        for (j = i + 1; j < n; j++)
        {
            if (s[j].r < s[minIndex].r)
                minIndex = j;
        }
        temp = s[minIndex];
        s[minIndex] = s[i];
        s[i] = temp;
    }
}

void binarySearch(struct Student arr[], int left, int right, int rollNumber)
{
    if (right >= left)
    {
        int mid = left + (right - left) / 2;

        if (s[mid].r == rollNumber)
            return mid;

        if (r[mid].rollNumber > rollNumber)
            return binarySearch(s, left, mid - 1, rollNumber);

        return binarySearch(s, mid + 1, right, rollnumber);
    }
